// Mocks generated by Mockito 5.0.15 from annotations
// in flutball/test/data/repositories/football_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i3;
import 'package:flutball/data/datasources/remote/football_api_service.dart'
    as _i4;
import 'package:flutball/data/models/responses/competition_response_model.dart'
    as _i8;
import 'package:flutball/data/models/responses/match_response_model.dart'
    as _i6;
import 'package:flutball/data/models/responses/team_response_model.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/dio.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeHttpResponse_0<T> extends _i1.Fake implements _i2.HttpResponse<T> {}

class _FakeOptions_1 extends _i1.Fake implements _i3.Options {}

class _FakeRequestOptions_2 extends _i1.Fake implements _i3.RequestOptions {}

class _FakeUri_3 extends _i1.Fake implements Uri {}

/// A class which mocks [FootballApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFootballApiService extends _i1.Mock
    implements _i4.FootballApiService {
  MockFootballApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.HttpResponse<_i6.MatchResponseModel>> getMatches(
          {int? competitionId,
          String? dateFrom,
          String? dateTo,
          String? status,
          _i3.Options? options}) =>
      (super.noSuchMethod(
          Invocation.method(#getMatches, [], {
            #competitionId: competitionId,
            #dateFrom: dateFrom,
            #dateTo: dateTo,
            #status: status,
            #options: options
          }),
          returnValue: Future<_i2.HttpResponse<_i6.MatchResponseModel>>.value(
              _FakeHttpResponse_0<_i6.MatchResponseModel>())) as _i5
          .Future<_i2.HttpResponse<_i6.MatchResponseModel>>);
  @override
  _i5.Future<_i2.HttpResponse<_i7.TeamResponseModel>> getTeam(
          {int? teamId, _i3.Options? options}) =>
      (super.noSuchMethod(
          Invocation.method(#getTeam, [], {#teamId: teamId, #options: options}),
          returnValue: Future<_i2.HttpResponse<_i7.TeamResponseModel>>.value(
              _FakeHttpResponse_0<_i7.TeamResponseModel>())) as _i5
          .Future<_i2.HttpResponse<_i7.TeamResponseModel>>);
  @override
  _i5.Future<_i2.HttpResponse<_i8.CompetitionResponseModel>> getCompetitions(
          {String? plan, _i3.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getCompetitions, [], {#plan: plan, #options: options}),
              returnValue:
                  Future<_i2.HttpResponse<_i8.CompetitionResponseModel>>.value(
                      _FakeHttpResponse_0<_i8.CompetitionResponseModel>()))
          as _i5.Future<_i2.HttpResponse<_i8.CompetitionResponseModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Options].
///
/// See the documentation for Mockito's code generation for more information.
class MockOptions extends _i1.Mock implements _i3.Options {
  MockOptions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  set headers(Map<String, dynamic>? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  set sendTimeout(int? _sendTimeout) =>
      super.noSuchMethod(Invocation.setter(#sendTimeout, _sendTimeout),
          returnValueForMissingStub: null);
  @override
  set receiveTimeout(int? _receiveTimeout) =>
      super.noSuchMethod(Invocation.setter(#receiveTimeout, _receiveTimeout),
          returnValueForMissingStub: null);
  @override
  set contentType(String? _contentType) =>
      super.noSuchMethod(Invocation.setter(#contentType, _contentType),
          returnValueForMissingStub: null);
  @override
  set responseType(_i3.ResponseType? _responseType) =>
      super.noSuchMethod(Invocation.setter(#responseType, _responseType),
          returnValueForMissingStub: null);
  @override
  set validateStatus(_i3.ValidateStatus? _validateStatus) =>
      super.noSuchMethod(Invocation.setter(#validateStatus, _validateStatus),
          returnValueForMissingStub: null);
  @override
  set receiveDataWhenStatusError(bool? _receiveDataWhenStatusError) =>
      super.noSuchMethod(
          Invocation.setter(
              #receiveDataWhenStatusError, _receiveDataWhenStatusError),
          returnValueForMissingStub: null);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  set requestEncoder(_i3.RequestEncoder? _requestEncoder) =>
      super.noSuchMethod(Invocation.setter(#requestEncoder, _requestEncoder),
          returnValueForMissingStub: null);
  @override
  set responseDecoder(_i3.ResponseDecoder? _responseDecoder) =>
      super.noSuchMethod(Invocation.setter(#responseDecoder, _responseDecoder),
          returnValueForMissingStub: null);
  @override
  set listFormat(_i3.ListFormat? _listFormat) =>
      super.noSuchMethod(Invocation.setter(#listFormat, _listFormat),
          returnValueForMissingStub: null);
  @override
  _i3.Options copyWith(
          {String? method,
          int? sendTimeout,
          int? receiveTimeout,
          Map<String, dynamic>? extra,
          Map<String, dynamic>? headers,
          _i3.ResponseType? responseType,
          String? contentType,
          _i3.ValidateStatus? validateStatus,
          bool? receiveDataWhenStatusError,
          bool? followRedirects,
          int? maxRedirects,
          _i3.RequestEncoder? requestEncoder,
          _i3.ResponseDecoder? responseDecoder,
          _i3.ListFormat? listFormat}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #method: method,
            #sendTimeout: sendTimeout,
            #receiveTimeout: receiveTimeout,
            #extra: extra,
            #headers: headers,
            #responseType: responseType,
            #contentType: contentType,
            #validateStatus: validateStatus,
            #receiveDataWhenStatusError: receiveDataWhenStatusError,
            #followRedirects: followRedirects,
            #maxRedirects: maxRedirects,
            #requestEncoder: requestEncoder,
            #responseDecoder: responseDecoder,
            #listFormat: listFormat
          }),
          returnValue: _FakeOptions_1()) as _i3.Options);
  @override
  _i3.RequestOptions compose(_i3.BaseOptions? baseOpt, String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i3.CancelToken? cancelToken,
          _i3.Options? options,
          _i3.ProgressCallback? onSendProgress,
          _i3.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
          Invocation.method(#compose, [
            baseOpt,
            path
          ], {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress
          }),
          returnValue: _FakeRequestOptions_2()) as _i3.RequestOptions);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RequestOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestOptions extends _i1.Mock implements _i3.RequestOptions {
  MockRequestOptions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(dynamic _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  set path(String? _path) => super.noSuchMethod(Invocation.setter(#path, _path),
      returnValueForMissingStub: null);
  @override
  set cancelToken(_i3.CancelToken? _cancelToken) =>
      super.noSuchMethod(Invocation.setter(#cancelToken, _cancelToken),
          returnValueForMissingStub: null);
  @override
  set onReceiveProgress(_i3.ProgressCallback? _onReceiveProgress) => super
      .noSuchMethod(Invocation.setter(#onReceiveProgress, _onReceiveProgress),
          returnValueForMissingStub: null);
  @override
  set onSendProgress(_i3.ProgressCallback? _onSendProgress) =>
      super.noSuchMethod(Invocation.setter(#onSendProgress, _onSendProgress),
          returnValueForMissingStub: null);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_3())
          as Uri);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  int get sendTimeout =>
      (super.noSuchMethod(Invocation.getter(#sendTimeout), returnValue: 0)
          as int);
  @override
  set sendTimeout(int? _sendTimeout) =>
      super.noSuchMethod(Invocation.setter(#sendTimeout, _sendTimeout),
          returnValueForMissingStub: null);
  @override
  int get receiveTimeout =>
      (super.noSuchMethod(Invocation.getter(#receiveTimeout), returnValue: 0)
          as int);
  @override
  set receiveTimeout(int? _receiveTimeout) =>
      super.noSuchMethod(Invocation.setter(#receiveTimeout, _receiveTimeout),
          returnValueForMissingStub: null);
  @override
  _i3.ResponseType get responseType =>
      (super.noSuchMethod(Invocation.getter(#responseType),
          returnValue: _i3.ResponseType.json) as _i3.ResponseType);
  @override
  set responseType(_i3.ResponseType? _responseType) =>
      super.noSuchMethod(Invocation.setter(#responseType, _responseType),
          returnValueForMissingStub: null);
  @override
  _i3.ValidateStatus get validateStatus =>
      (super.noSuchMethod(Invocation.getter(#validateStatus),
          returnValue: (int? status) => false) as _i3.ValidateStatus);
  @override
  set validateStatus(_i3.ValidateStatus? _validateStatus) =>
      super.noSuchMethod(Invocation.setter(#validateStatus, _validateStatus),
          returnValueForMissingStub: null);
  @override
  bool get receiveDataWhenStatusError =>
      (super.noSuchMethod(Invocation.getter(#receiveDataWhenStatusError),
          returnValue: false) as bool);
  @override
  set receiveDataWhenStatusError(bool? _receiveDataWhenStatusError) =>
      super.noSuchMethod(
          Invocation.setter(
              #receiveDataWhenStatusError, _receiveDataWhenStatusError),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  set requestEncoder(_i3.RequestEncoder? _requestEncoder) =>
      super.noSuchMethod(Invocation.setter(#requestEncoder, _requestEncoder),
          returnValueForMissingStub: null);
  @override
  set responseDecoder(_i3.ResponseDecoder? _responseDecoder) =>
      super.noSuchMethod(Invocation.setter(#responseDecoder, _responseDecoder),
          returnValueForMissingStub: null);
  @override
  _i3.ListFormat get listFormat =>
      (super.noSuchMethod(Invocation.getter(#listFormat),
          returnValue: _i3.ListFormat.csv) as _i3.ListFormat);
  @override
  set listFormat(_i3.ListFormat? _listFormat) =>
      super.noSuchMethod(Invocation.setter(#listFormat, _listFormat),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set headers(Map<String, dynamic>? headers) =>
      super.noSuchMethod(Invocation.setter(#headers, headers),
          returnValueForMissingStub: null);
  @override
  set contentType(String? contentType) =>
      super.noSuchMethod(Invocation.setter(#contentType, contentType),
          returnValueForMissingStub: null);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get queryParameters =>
      (super.noSuchMethod(Invocation.getter(#queryParameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set queryParameters(Map<String, dynamic>? _queryParameters) =>
      super.noSuchMethod(Invocation.setter(#queryParameters, _queryParameters),
          returnValueForMissingStub: null);
  @override
  int get connectTimeout =>
      (super.noSuchMethod(Invocation.getter(#connectTimeout), returnValue: 0)
          as int);
  @override
  set connectTimeout(int? _connectTimeout) =>
      super.noSuchMethod(Invocation.setter(#connectTimeout, _connectTimeout),
          returnValueForMissingStub: null);
  @override
  _i3.RequestOptions copyWith(
          {String? method,
          int? sendTimeout,
          int? receiveTimeout,
          int? connectTimeout,
          String? data,
          String? path,
          Map<String, dynamic>? queryParameters,
          String? baseUrl,
          _i3.ProgressCallback? onReceiveProgress,
          _i3.ProgressCallback? onSendProgress,
          _i3.CancelToken? cancelToken,
          Map<String, dynamic>? extra,
          Map<String, dynamic>? headers,
          _i3.ResponseType? responseType,
          String? contentType,
          _i3.ValidateStatus? validateStatus,
          bool? receiveDataWhenStatusError,
          bool? followRedirects,
          int? maxRedirects,
          _i3.RequestEncoder? requestEncoder,
          _i3.ResponseDecoder? responseDecoder,
          _i3.ListFormat? listFormat,
          bool? setRequestContentTypeWhenNoPayload}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #method: method,
            #sendTimeout: sendTimeout,
            #receiveTimeout: receiveTimeout,
            #connectTimeout: connectTimeout,
            #data: data,
            #path: path,
            #queryParameters: queryParameters,
            #baseUrl: baseUrl,
            #onReceiveProgress: onReceiveProgress,
            #onSendProgress: onSendProgress,
            #cancelToken: cancelToken,
            #extra: extra,
            #headers: headers,
            #responseType: responseType,
            #contentType: contentType,
            #validateStatus: validateStatus,
            #receiveDataWhenStatusError: receiveDataWhenStatusError,
            #followRedirects: followRedirects,
            #maxRedirects: maxRedirects,
            #requestEncoder: requestEncoder,
            #responseDecoder: responseDecoder,
            #listFormat: listFormat,
            #setRequestContentTypeWhenNoPayload:
                setRequestContentTypeWhenNoPayload
          }),
          returnValue: _FakeRequestOptions_2()) as _i3.RequestOptions);
  @override
  String toString() => super.toString();
}
